{
  "description": [
    "If we create all our web components like we just created the axe, we'll have a hard time doing adjustments.",
    "From a programmer point of view, it would be easier if we didn't have to touch the HTML in order to change the value of the size or sharpness.",
    "Let's introduce local properties. These properties are to be used only by the component itself and are not passed through via attributes.",
    "To create a local property, prefix it with an underscore \"_\". Give it a try. Create _sharpness and _size. They're both Strings and have a default value. For _sharpness, use \"Extreme\" and for _size use \"Large\". Afterwards, pass them through with one-way data binding."
  ],
  "followUpMessage": "Now that is an axe if I've ever seen one! Great job! I can use it for chopping wood. What? You thought we would further use the axe? Oh no, my friend. I just wanted a fancy axe to show off to my friends. For Polycraft, we'll need to create something different...",
  "exercises": [
    {
      "fileName": "axe.html",
      "template": "<link rel=\"import\" href=\"lib/polymer/polymer-element.html\">\n<link rel=\"import\" href=\"handle.html\">\n<link rel=\"import\" href=\"rock.html\">\n\n<dom-module id=\"axe\">\n    <template>\n        <div>\n            <rock sharpness=\"Sharp\"></rock>\n            <handle size=\"Medium\"></handle>\n        </div>\n    </template>\n</dom-module>\n\n<script>\n    class Axe extends Polymer.Element {\n\n        static get is() {\n            return 'axe';\n        }\n    }\n\n    window.customElements.define(Axe.is, Axe);\n</script>",
      "hint": "<link rel=\"import\" href=\"lib/polymer/polymer-element.html\">\n<link rel=\"import\" href=\"handle.html\">\n<link rel=\"import\" href=\"rock.html\">\n\n<dom-module id=\"axe\">\n    <template>\n        <div>\n            <rock sharpness=\"[[_sharpness]]\"></rock>\n            <handle size=\"[[_size]]\"></handle>\n        </div>\n    </template>\n</dom-module>\n\n<script>\n    class Axe extends Polymer.Element {\n\n        static get is() {\n            return 'axe';\n        }\n\n    static get properties() {\n        return {\n            _sharpness: {\n                type: String,\n                value: 'Extreme',\n            },\n            _size: {\n                type: String,\n                value: 'Large',\n            }\n        };\n    }\n\n    window.customElements.define(Axe.is, Axe);\n</script>",
      "solutionRegExp": "(<link rel=\"import\" href=\"lib\/polymer\/polymer-element\\.html\">)(\\s)+((<link rel=\"import\" href=\"handle\\.html\">)(\\s)+(<link rel=\"import\" href=\"rock\\.html\">)|(<link rel=\"import\" href=\"rock\\.html\">)(\\s)+(<link rel=\"import\" href=\"handle\\.html\">))(\\s)+(<dom-module id=\"axe\">)(\\s)+(<template>)(\\s)+(<div>)(\\s)+(<rock sharpness=\"\\[\\[\\_sharpness\\]\\]\">)(\\s)*(<\/rock>)(\\s)+(<handle size=\"\\[\\[_size\\]\\]\">)(\\s)*(<\/handle>)(\\s)+(<\/div>)(\\s)+(<\/template>)(\\s)+(<\/dom-module>)(\\s)+(<script>)(\\s)+(class)(\\s)(Axe)(\\s)(extends)(\\s)(Polymer\\.Element)(\\s)+{(\\s)+(static get is\\(\\))(\\s)+{(\\s)+(return 'axe';)(\\s)+}(\\s)+(static get properties\\(\\))(\\s)+{(\\s)+(return)(\\s)+{(\\s)+(((_size:)(\\s)*{(\\s)+(type: String,)(\\s)*(value: 'Large'),?(\\s)*},?(\\s)+(_sharpness:)(\\s)*{(\\s)+(type: String,)(\\s)*(value: 'Extreme'),?(\\s)*},?)|((_sharpness:)(\\s)*{(\\s)+(type: String,)(\\s)*(value: 'Extreme'),?(\\s)*},?(\\s)+(_size:)(\\s)*{(\\s)+(type: String,)(\\s)*(value: 'Large'),?(\\s)*},?))(\\s)+};?(\\s)+}(\\s)+}(\\s)+(window\\.customElements\\.define\\(Axe\\.is,)(\\s)(Axe\\);)(\\s)+(<\/script>)"
    },
    {
      "fileName": "handle.html",
      "template": "<link rel=\"import\" href=\"lib/polymer/polymer-element.html\">\n\n<dom-module id=\"handle\">\n    <template>\n        <img src=\"assets/images/handle[[size]].png\"/>\n    </template>\n</dom-module>\n\n<script>\n    class Handle extends Polymer.Element {\n\n        static get is() {\n            return 'handle';\n        }\n\n        static get properties() {\n            return {\n                size: {\n                    type: String,\n                    value: '',\n                }\n            };\n        }\n    }\n\n    window.customElements.define(Handle.is, Handle);\n</script>",
      "hint": "Oops, you didn't have to change anything to this file! Undo your change!",
      "solutionRegExp": "(<link rel=\"import\" href=\"lib\/polymer\/polymer-element.html\">)(\\s)+(<dom-module)(\\s)(id=\"handle\">)(\\s)+(<template>)(\\s)+(<img)(\\s)(src=\"assets\/images\/handle\\[\\[size\\]\\].png\"\/>)(\\s)+(<\/template>)(\\s)+(<\/dom-module>)(\\s)+(<script>)(\\s)+(class)(\\s)(Handle)(\\s)(extends)(\\s)(Polymer\\.Element)(\\s)+{(\\s)+(static get is\\(\\))(\\s)+{(\\s)+(return 'handle';)(\\s)+}(\\s)+(static get properties\\(\\))(\\s)+{(\\s)+(return)(\\s)+{(\\s)+(size:)(\\s)+{(\\s)+(type: String,)(\\s)+(value: ''),?(\\s)+},?(\\s)+};?(\\s)+}(\\s)+}(\\s)+(window\\.customElements\\.define\\(Handle\\.is,)(\\s)(Handle\\);)(\\s)+(<\/script>)"
    },
    {
      "fileName": "rock.html",
      "template": "<link rel=\"import\" href=\"lib/polymer/polymer-element.html\">\n\n<dom-module id=\"rock\">\n    <template>\n        <img src=\"assets/images/rock[[sharpness]].png\"/>\n    </template>\n</dom-module>\n\n<script>\n    class Rock extends Polymer.Element {\n\n        static get is() {\n            return 'rock';\n        }\n\n        static get properties() {\n            return {\n                sharpness: {\n                    type: String,\n                    value: '',\n                }\n            };\n        }\n    }\n\n    window.customElements.define(Rock.is, Rock);\n</script>",
      "hint": "Oops, you didn't have to change anything to this file! Undo your change!",
      "solutionRegExp": "(<link rel=\"import\" href=\"lib\/polymer\/polymer-element.html\">)(\\s)+(<dom-module)(\\s)(id=\"rock\">)(\\s)+(<template>)(\\s)+(<img)(\\s)(src=\"assets\/images\/rock\\[\\[sharpness\\]\\].png\"\/>)(\\s)+(<\/template>)(\\s)+(<\/dom-module>)(\\s)+(<script>)(\\s)+(class)(\\s)(Rock)(\\s)(extends)(\\s)(Polymer\\.Element)(\\s)+{(\\s)+(static get is\\(\\))(\\s)+{(\\s)+(return 'rock';)(\\s)+}(\\s)+(static get properties\\(\\))(\\s)+{(\\s)+(return)(\\s)+{(\\s)+(sharpness:)(\\s)+{(\\s)+(type: String,)(\\s)+(value: ''),?(\\s)+},?(\\s)+};?(\\s)+}(\\s)+}(\\s)+(window\\.customElements\\.define\\(Rock\\.is,)(\\s)(Rock\\);)(\\s)+(<\/script>)"
    }
  ],
  "image": "nice-axe.png"
}