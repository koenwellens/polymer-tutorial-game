{
  "description": ["We have a handle and a rock. We need some extra things to craft our axe.",
    "Our rock is not sharp and our handle is not long enough. We can do something about that.",
    "Polymer provides a way to pass properties to web components. The way to do this is to add an extra method to your class.",
    "This properties method returns one object for which all the properties are fields. And each field is an object with a type and a value.",
    "The fields can have more, but let's start with this for now. Property types can be String, Number, Array, Object and Boolean.",
    "The value field for each property is the default value it gets when it is not passed through as an attribute. More on that later.",
    "The method a static getter with the name \"properties\". It returns an object for which all the properties are fields. Go ahead and create a size property that is a String and has an empty string as value."],
  "followUpMessage": "Great job! Now a size can be passed through to the handle. Let's see how we can use this property in the HTML.",
  "exercises": [
    {
      "fileName": "handle.html",
      "template": "<link rel=\"import\" href=\"lib/polymer/polymer-element.html\">\n\n<dom-module id=\"handle\">\n    <template>\n        <img src=\"assets/images/handle.png\"/>\n    </template>\n</dom-module>\n\n<script>\n    class Handle extends Polymer.Element {\n\n        static get is() {\n            return 'handle';\n        }\n    }\n\n    window.customElements.define(Handle.is, Handle);\n</script>",
      "hint": "<link rel=\"import\" href=\"lib/polymer/polymer-element.html\">\n\n<dom-module id=\"handle\">\n    <template>\n        <img src=\"assets/images/handle.png\"/>\n    </template>\n</dom-module>\n\n<script>\n    class Handle extends Polymer.Element {\n\n        static get is() {\n            return 'handle';\n        }\n\n    static get properties() {\n        return {\n            size: {\n                type: String,\n                value: '',\n            }\n        };\n    }\n\n    window.customElements.define(Handle.is, Handle);\n</script>",
      "solutionRegExp": "(<link)(\\s)(rel=\"import\")(\\s)(href=\"lib/polymer/polymer-element.html\">)(\\s)+(<dom-module)(\\s)(id=\"handle\">)(\\s)+(<template>)(\\s)+(<img)(\\s)(src=\"assets/images/handle.png\"/>)(\\s)+(</template>)(\\s)+(</dom-module>)(\\s)+(<script>)(\\s)+(class)(\\s)(Handle)(\\s)(extends)(\\s)(Polymer\\.Element)(\\s)+{(\\s)+(static get is\\(\\))(\\s)+{(\\s)+(return 'handle';)(\\s)+}(\\s)+(static get properties\\(\\))(\\s)+{(\\s)+(return)(\\s)+{(\\s)+(size:)(\\s)+{(\\s)+(type: String,)(\\s)+(value: ''),?(\\s)+},?(\\s)+};?(\\s)+}(\\s)+}(\\s)+(window\\.customElements\\.define\\(Handle\\.is,)(\\s)(Handle\\);)(\\s)+(<\/script>)"
    },
    {
      "fileName": "rock.html",
      "template": "<link rel=\"import\" href=\"lib/polymer/polymer-element.html\">\n\n<dom-module id=\"rock\">\n    <template>\n        <img src=\"assets/images/rock.png\"/>\n    </template>\n</dom-module>\n\n<script>\n    class Rock extends Polymer.Element {\n\n        static get is() {\n            return 'rock';\n        }\n    }\n\n    window.customElements.define(Rock.is, Rock);\n</script>",
      "hint": "Oops, you didn't have to change anything to this file! Undo your change!",
      "solutionRegExp": "(<link)(\\s)(rel=\"import\")(\\s)(href=\"lib\/polymer\/polymer-element.html\">)(\\s)+(<dom-module)(\\s)(id=\"rock\">)(\\s)+(<template>)(\\s)+(<img)(\\s)(src=\"assets/images/rock.png\"/>)(\\s)+(</template>)(\\s)+(<\/dom-module>)(\\s)+(<script>)(\\s)+(class)(\\s)(Rock)(\\s)(extends)(\\s)(Polymer\\.Element)(\\s)+{(\\s)+(static get is\\(\\))(\\s)+{(\\s)+(return 'rock';)(\\s)+}(\\s)+}(\\s)+(window\\.customElements\\.define\\(Rock\\.is,)(\\s)(Rock\\);)(\\s)+(<\/script>)"
    }
  ]
}