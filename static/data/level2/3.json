{
  "title": "Rock, Paper... Axes",
  "description": ["Let's put the size of the handle to use! In this section, you will learn how to do data binding.",
    "Data binding in Polymer allows you to use your properties in your HTML code. You can use to forms of data binding: one-way and two-way.",
    "One-way data binding is done with 2 sets of brackets: \"[[yourProperty]]\". Two-way data binding is done with 2 sets of curly braces: \"{{yourProperty}}\".",
    "For this exercise, you will have to use one-way data binding of your \"size\" property. What will we use it for? To display a different image if necessary!",
    "So instead of going for \"assets/images/handle.png\", try to use your size property to allow users to change the image. The images you have are handle.png, handleSmall.png, handleMedium.png and handleXl.png."],
  "followUpMessage": "You've done it again! Spectacular! Maybe it is useful to have a property for the rock as well. Let's have a look!",
  "exercises": [
    {
      "fileName": "handle.html",
      "template": "<link rel=\"import\" href=\"lib/polymer/polymer-element.html\">\n\n<dom-module id=\"handle\">\n    <template>\n        <img src=\"assets/images/handle.png\"/>\n    </template>\n</dom-module>\n\n<script>\n    class Handle extends Polymer.Element {\n\n        static get is() {\n            return 'handle';\n        }\n\n    static get properties() {\n        return {\n            size: {\n                type: String,\n                value: '',\n            }\n        };\n    }\n\n    window.customElements.define(Handle.is, Handle);\n</script>",
      "hint": "<link rel=\"import\" href=\"lib/polymer/polymer-element.html\">\n\n<dom-module id=\"handle\">\n    <template>\n        <img src=\"assets/images/handle[[size]].png\"/>\n    </template>\n</dom-module>\n\n<script>\n    class Handle extends Polymer.Element {\n\n        static get is() {\n            return 'handle';\n        }\n\n    static get properties() {\n        return {\n            size: {\n                type: String,\n                value: '',\n            }\n        };\n    }\n\n    window.customElements.define(Handle.is, Handle);\n</script>",
      "solutionRegExp": "(<link rel=\"import\" href=\"lib\/polymer\/polymer-element.html\">)(\\s)+(<dom-module)(\\s)(id=\"handle\">)(\\s)+(<template>)(\\s)+(<img)(\\s)(src=\"assets\/images\/handle\\[\\[size\\]\\].png\"\/>)(\\s)+(<\/template>)(\\s)+(<\/dom-module>)(\\s)+(<script>)(\\s)+(class)(\\s)(Handle)(\\s)(extends)(\\s)(Polymer\\.Element)(\\s)+{(\\s)+(static get is\\(\\))(\\s)+{(\\s)+(return 'handle';)(\\s)+}(\\s)+(static get properties\\(\\))(\\s)+{(\\s)+(return)(\\s)+{(\\s)+(size:)(\\s)+{(\\s)+(type: String,)(\\s)+(value: ''),?(\\s)+},?(\\s)+};?(\\s)+}(\\s)+}(\\s)+(window\\.customElements\\.define\\(Handle\\.is,)(\\s)(Handle\\);)(\\s)+(<\/script>)"
    },
    {
      "fileName": "rock.html",
      "template": "<link rel=\"import\" href=\"lib/polymer/polymer-element.html\">\n\n<dom-module id=\"rock\">\n    <template>\n        <img src=\"assets/images/rock.png\"/>\n    </template>\n</dom-module>\n\n<script>\n    class Rock extends Polymer.Element {\n\n        static get is() {\n            return 'rock';\n        }\n    }\n\n    window.customElements.define(Rock.is, Rock);\n</script>",
      "hint": "Oops, you didn't have to change anything to this file! Undo your change!",
      "solutionRegExp": "(<link)(\\s)(rel=\"import\")(\\s)(href=\"lib\/polymer\/polymer-element.html\">)(\\s)+(<dom-module)(\\s)(id=\"rock\">)(\\s)+(<template>)(\\s)+(<img)(\\s)(src=\"assets/images/rock.png\"/>)(\\s)+(</template>)(\\s)+(<\/dom-module>)(\\s)+(<script>)(\\s)+(class)(\\s)(Rock)(\\s)(extends)(\\s)(Polymer\\.Element)(\\s)+{(\\s)+(static get is\\(\\))(\\s)+{(\\s)+(return 'rock';)(\\s)+}(\\s)+}(\\s)+(window\\.customElements\\.define\\(Rock\\.is,)(\\s)(Rock\\);)(\\s)+(<\/script>)"
    }
  ]
}